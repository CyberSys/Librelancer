// AUTOGENERATED CODE
// Generated: 20220613 13:50:29 UTC
// Method count: 46

// ReSharper disable All

using System;
using System.Numerics;
using System.Threading;
using System.Threading.Tasks;
using LiteNetLib;
using LiteNetLib.Utils;

namespace LibreLancer.Net
{
    public interface IClientPlayer
    {
        void UpdateBaselinePrices(BaselinePrice[] prices);
        void CallThorn(string script, int mainObject);
        void SpawnObject(int id, string name, Vector3 position, Quaternion orientation, NetShipLoadout loadout);
        void SpawnPlayer(string system, double systime, Vector3 position, Quaternion orientation);
        void UpdateEffects(int id, SpawnedEffect[] effects);
        void SpawnProjectiles(ProjectileSpawn[] projectiles);
        void StartAnimation(bool systemObject, int id, string anim);
        void UpdateInventory(long credits, ulong shipworth, NetShipLoadout ship);
        void SpawnSolar(SolarInfo[] solars);
        void OnConsoleMessage(string text);
        void SpawnDebris(int id, GameObjectKind kind, string archetype, string part, Vector3 position, Quaternion orientation, float mass);
        void BaseEnter(string _base, string[] rtcs, NewsArticle[] news, SoldGood[] goods, NetSoldShip[] ships);
        void UpdateRTCs(string[] rtcs);
        void Killed();
        void DespawnObject(int id);
        void PlaySound(string sound);
        void PlayMusic(string music);
        void DestroyPart(byte idtype, int id, string part);
        void RunMissionDialog(NetDlgLine[] lines);
        void StartJumpTunnel();
        void StartTradelane();
        void EndTradelane();
        void ReceiveChatMessage(ChatCategory category, string player, string message);
        void PopupOpen(int title, int contents, string id);
    }

    public interface IServerPlayer
    {
        void Launch();
        void RTCComplete(string rtc);
        void LineSpoken(uint hash);
        void OnLocationEnter(string _base, string room);
        void ConsoleCommand(string command);
        void RequestCharacterDB();
        Task<bool> SelectCharacter(int index);
        Task<bool> DeleteCharacter(int index);
        Task<bool> CreateNewCharacter(string name, int index);
        Task<bool> PurchaseGood(string item, int count);
        Task<bool> SellGood(int id, int count);
        Task<ShipPackageInfo> GetShipPackage(int package);
        Task<ShipPurchaseStatus> PurchaseShip(int package, MountId[] mountedPlayer, MountId[] mountedPackage, SellCount[] sellPlayer, SellCount[] sellPackage);
        void RequestDock(string nickname);
        void FireProjectiles(ProjectileSpawn[] projectiles);
        Task<bool> Unmount(string hardpoint);
        Task<bool> Mount(int id);
        void ClosedPopup(string id);
        void StoryNPCSelect(string name, string room, string _base);
        void RTCMissionAccepted();
        void Respawn();
        void ChatMessage(ChatCategory category, string message);
    }

    public partial class RemoteServerPlayer : IServerPlayer
    {
        int retSeq;

        public void Launch()
        {
            SendPacket(new ServerPacket_Launch() {
            });
        }

        public void RTCComplete(string rtc)
        {
            SendPacket(new ServerPacket_RTCComplete() {
                rtc = rtc,
            });
        }

        public void LineSpoken(uint hash)
        {
            SendPacket(new ServerPacket_LineSpoken() {
                hash = hash,
            });
        }

        public void OnLocationEnter(string _base, string room)
        {
            SendPacket(new ServerPacket_OnLocationEnter() {
                _base = _base,
                room = room,
            });
        }

        public void ConsoleCommand(string command)
        {
            SendPacket(new ServerPacket_ConsoleCommand() {
                command = command,
            });
        }

        public void RequestCharacterDB()
        {
            SendPacket(new ServerPacket_RequestCharacterDB() {
            });
        }

        public Task<bool> SelectCharacter(int index)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_SelectCharacter() {
                Sequence = __SEQ,
                index = index,
            });
            return complete.Task;
        }

        public Task<bool> DeleteCharacter(int index)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_DeleteCharacter() {
                Sequence = __SEQ,
                index = index,
            });
            return complete.Task;
        }

        public Task<bool> CreateNewCharacter(string name, int index)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_CreateNewCharacter() {
                Sequence = __SEQ,
                name = name,
                index = index,
            });
            return complete.Task;
        }

        public Task<bool> PurchaseGood(string item, int count)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_PurchaseGood() {
                Sequence = __SEQ,
                item = item,
                count = count,
            });
            return complete.Task;
        }

        public Task<bool> SellGood(int id, int count)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_SellGood() {
                Sequence = __SEQ,
                id = id,
                count = count,
            });
            return complete.Task;
        }

        public Task<ShipPackageInfo> GetShipPackage(int package)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_ShipPackageInfo(__SEQ);
            SendPacket(new ServerPacket_GetShipPackage() {
                Sequence = __SEQ,
                package = package,
            });
            return complete.Task;
        }

        public Task<ShipPurchaseStatus> PurchaseShip(int package, MountId[] mountedPlayer, MountId[] mountedPackage, SellCount[] sellPlayer, SellCount[] sellPackage)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_ShipPurchaseStatus(__SEQ);
            SendPacket(new ServerPacket_PurchaseShip() {
                Sequence = __SEQ,
                package = package,
                mountedPlayer = mountedPlayer,
                mountedPackage = mountedPackage,
                sellPlayer = sellPlayer,
                sellPackage = sellPackage,
            });
            return complete.Task;
        }

        public void RequestDock(string nickname)
        {
            SendPacket(new ServerPacket_RequestDock() {
                nickname = nickname,
            });
        }

        public void FireProjectiles(ProjectileSpawn[] projectiles)
        {
            SendPacket(new ServerPacket_FireProjectiles() {
                projectiles = projectiles,
            });
        }

        public Task<bool> Unmount(string hardpoint)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_Unmount() {
                Sequence = __SEQ,
                hardpoint = hardpoint,
            });
            return complete.Task;
        }

        public Task<bool> Mount(int id)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_Mount() {
                Sequence = __SEQ,
                id = id,
            });
            return complete.Task;
        }

        public void ClosedPopup(string id)
        {
            SendPacket(new ServerPacket_ClosedPopup() {
                id = id,
            });
        }

        public void StoryNPCSelect(string name, string room, string _base)
        {
            SendPacket(new ServerPacket_StoryNPCSelect() {
                name = name,
                room = room,
                _base = _base,
            });
        }

        public void RTCMissionAccepted()
        {
            SendPacket(new ServerPacket_RTCMissionAccepted() {
            });
        }

        public void Respawn()
        {
            SendPacket(new ServerPacket_Respawn() {
            });
        }

        public void ChatMessage(ChatCategory category, string message)
        {
            SendPacket(new ServerPacket_ChatMessage() {
                category = category,
                message = message,
            });
        }

    }
    public partial class RemoteClientPlayer : IClientPlayer
    {
        int retSeq;

        public void UpdateBaselinePrices(BaselinePrice[] prices)
        {
            SendPacket(new ClientPacket_UpdateBaselinePrices() {
                prices = prices,
            });
        }

        public void CallThorn(string script, int mainObject)
        {
            SendPacket(new ClientPacket_CallThorn() {
                script = script,
                mainObject = mainObject,
            });
        }

        public void SpawnObject(int id, string name, Vector3 position, Quaternion orientation, NetShipLoadout loadout)
        {
            SendPacket(new ClientPacket_SpawnObject() {
                id = id,
                name = name,
                position = position,
                orientation = orientation,
                loadout = loadout,
            });
        }

        public void SpawnPlayer(string system, double systime, Vector3 position, Quaternion orientation)
        {
            SendPacket(new ClientPacket_SpawnPlayer() {
                system = system,
                systime = systime,
                position = position,
                orientation = orientation,
            });
        }

        public void UpdateEffects(int id, SpawnedEffect[] effects)
        {
            SendPacket(new ClientPacket_UpdateEffects() {
                id = id,
                effects = effects,
            });
        }

        public void SpawnProjectiles(ProjectileSpawn[] projectiles)
        {
            SendPacket(new ClientPacket_SpawnProjectiles() {
                projectiles = projectiles,
            });
        }

        public void StartAnimation(bool systemObject, int id, string anim)
        {
            SendPacket(new ClientPacket_StartAnimation() {
                systemObject = systemObject,
                id = id,
                anim = anim,
            });
        }

        public void UpdateInventory(long credits, ulong shipworth, NetShipLoadout ship)
        {
            SendPacket(new ClientPacket_UpdateInventory() {
                credits = credits,
                shipworth = shipworth,
                ship = ship,
            });
        }

        public void SpawnSolar(SolarInfo[] solars)
        {
            SendPacket(new ClientPacket_SpawnSolar() {
                solars = solars,
            });
        }

        public void OnConsoleMessage(string text)
        {
            SendPacket(new ClientPacket_OnConsoleMessage() {
                text = text,
            });
        }

        public void SpawnDebris(int id, GameObjectKind kind, string archetype, string part, Vector3 position, Quaternion orientation, float mass)
        {
            SendPacket(new ClientPacket_SpawnDebris() {
                id = id,
                kind = kind,
                archetype = archetype,
                part = part,
                position = position,
                orientation = orientation,
                mass = mass,
            });
        }

        public void BaseEnter(string _base, string[] rtcs, NewsArticle[] news, SoldGood[] goods, NetSoldShip[] ships)
        {
            SendPacket(new ClientPacket_BaseEnter() {
                _base = _base,
                rtcs = rtcs,
                news = news,
                goods = goods,
                ships = ships,
            });
        }

        public void UpdateRTCs(string[] rtcs)
        {
            SendPacket(new ClientPacket_UpdateRTCs() {
                rtcs = rtcs,
            });
        }

        public void Killed()
        {
            SendPacket(new ClientPacket_Killed() {
            });
        }

        public void DespawnObject(int id)
        {
            SendPacket(new ClientPacket_DespawnObject() {
                id = id,
            });
        }

        public void PlaySound(string sound)
        {
            SendPacket(new ClientPacket_PlaySound() {
                sound = sound,
            });
        }

        public void PlayMusic(string music)
        {
            SendPacket(new ClientPacket_PlayMusic() {
                music = music,
            });
        }

        public void DestroyPart(byte idtype, int id, string part)
        {
            SendPacket(new ClientPacket_DestroyPart() {
                idtype = idtype,
                id = id,
                part = part,
            });
        }

        public void RunMissionDialog(NetDlgLine[] lines)
        {
            SendPacket(new ClientPacket_RunMissionDialog() {
                lines = lines,
            });
        }

        public void StartJumpTunnel()
        {
            SendPacket(new ClientPacket_StartJumpTunnel() {
            });
        }

        public void StartTradelane()
        {
            SendPacket(new ClientPacket_StartTradelane() {
            });
        }

        public void EndTradelane()
        {
            SendPacket(new ClientPacket_EndTradelane() {
            });
        }

        public void ReceiveChatMessage(ChatCategory category, string player, string message)
        {
            SendPacket(new ClientPacket_ReceiveChatMessage() {
                category = category,
                player = player,
                message = message,
            });
        }

        public void PopupOpen(int title, int contents, string id)
        {
            SendPacket(new ClientPacket_PopupOpen() {
                title = title,
                contents = contents,
                id = id,
            });
        }

    }

    public class ServerPacket_Launch : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_Launch();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ServerPacket_RTCComplete : IPacket
    {
        public string rtc;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_RTCComplete();
            _packet.rtc = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(rtc);
        }
    }

    public class ServerPacket_LineSpoken : IPacket
    {
        public uint hash;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_LineSpoken();
            _packet.hash = inPacket.GetUInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(hash);
        }
    }

    public class ServerPacket_OnLocationEnter : IPacket
    {
        public string _base;
        public string room;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_OnLocationEnter();
            _packet._base = inPacket.GetStringPacked();
            _packet.room = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(_base);
            outPacket.PutStringPacked(room);
        }
    }

    public class ServerPacket_ConsoleCommand : IPacket
    {
        public string command;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_ConsoleCommand();
            _packet.command = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(command);
        }
    }

    public class ServerPacket_RequestCharacterDB : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_RequestCharacterDB();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ServerPacket_SelectCharacter : IPacket
    {
        public int Sequence;
        public int index;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_SelectCharacter();
            _packet.Sequence = inPacket.GetInt();
            _packet.index = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(index);
        }
    }

    public class ServerPacket_DeleteCharacter : IPacket
    {
        public int Sequence;
        public int index;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_DeleteCharacter();
            _packet.Sequence = inPacket.GetInt();
            _packet.index = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(index);
        }
    }

    public class ServerPacket_CreateNewCharacter : IPacket
    {
        public int Sequence;
        public string name;
        public int index;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_CreateNewCharacter();
            _packet.Sequence = inPacket.GetInt();
            _packet.name = inPacket.GetStringPacked();
            _packet.index = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.PutStringPacked(name);
            outPacket.Put(index);
        }
    }

    public class ServerPacket_PurchaseGood : IPacket
    {
        public int Sequence;
        public string item;
        public int count;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_PurchaseGood();
            _packet.Sequence = inPacket.GetInt();
            _packet.item = inPacket.GetStringPacked();
            _packet.count = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.PutStringPacked(item);
            outPacket.Put(count);
        }
    }

    public class ServerPacket_SellGood : IPacket
    {
        public int Sequence;
        public int id;
        public int count;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_SellGood();
            _packet.Sequence = inPacket.GetInt();
            _packet.id = inPacket.GetInt();
            _packet.count = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(id);
            outPacket.Put(count);
        }
    }

    public class ServerPacket_GetShipPackage : IPacket
    {
        public int Sequence;
        public int package;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_GetShipPackage();
            _packet.Sequence = inPacket.GetInt();
            _packet.package = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(package);
        }
    }

    public class ServerPacket_PurchaseShip : IPacket
    {
        public int Sequence;
        public int package;
        public MountId[] mountedPlayer;
        public MountId[] mountedPackage;
        public SellCount[] sellPlayer;
        public SellCount[] sellPackage;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_PurchaseShip();
            _packet.Sequence = inPacket.GetInt();
            _packet.package = inPacket.GetInt();
            uint __len_mountedPlayer = inPacket.GetVariableUInt32();
            if (__len_mountedPlayer > 0) {
                _packet.mountedPlayer = new MountId[(int)(__len_mountedPlayer - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.mountedPlayer.Length; _ARRIDX++)
                    _packet.mountedPlayer[_ARRIDX] = MountId.Read(inPacket);
            }
            uint __len_mountedPackage = inPacket.GetVariableUInt32();
            if (__len_mountedPackage > 0) {
                _packet.mountedPackage = new MountId[(int)(__len_mountedPackage - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.mountedPackage.Length; _ARRIDX++)
                    _packet.mountedPackage[_ARRIDX] = MountId.Read(inPacket);
            }
            uint __len_sellPlayer = inPacket.GetVariableUInt32();
            if (__len_sellPlayer > 0) {
                _packet.sellPlayer = new SellCount[(int)(__len_sellPlayer - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.sellPlayer.Length; _ARRIDX++)
                    _packet.sellPlayer[_ARRIDX] = SellCount.Read(inPacket);
            }
            uint __len_sellPackage = inPacket.GetVariableUInt32();
            if (__len_sellPackage > 0) {
                _packet.sellPackage = new SellCount[(int)(__len_sellPackage - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.sellPackage.Length; _ARRIDX++)
                    _packet.sellPackage[_ARRIDX] = SellCount.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(package);
            if (mountedPlayer != null) {
                outPacket.PutVariableUInt32((uint)(mountedPlayer.Length + 1));
                foreach(var _element in mountedPlayer)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (mountedPackage != null) {
                outPacket.PutVariableUInt32((uint)(mountedPackage.Length + 1));
                foreach(var _element in mountedPackage)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (sellPlayer != null) {
                outPacket.PutVariableUInt32((uint)(sellPlayer.Length + 1));
                foreach(var _element in sellPlayer)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (sellPackage != null) {
                outPacket.PutVariableUInt32((uint)(sellPackage.Length + 1));
                foreach(var _element in sellPackage)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ServerPacket_RequestDock : IPacket
    {
        public string nickname;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_RequestDock();
            _packet.nickname = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(nickname);
        }
    }

    public class ServerPacket_FireProjectiles : IPacket
    {
        public ProjectileSpawn[] projectiles;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_FireProjectiles();
            uint __len_projectiles = inPacket.GetVariableUInt32();
            if (__len_projectiles > 0) {
                _packet.projectiles = new ProjectileSpawn[(int)(__len_projectiles - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.projectiles.Length; _ARRIDX++)
                    _packet.projectiles[_ARRIDX] = ProjectileSpawn.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            if (projectiles != null) {
                outPacket.PutVariableUInt32((uint)(projectiles.Length + 1));
                foreach(var _element in projectiles)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ServerPacket_Unmount : IPacket
    {
        public int Sequence;
        public string hardpoint;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_Unmount();
            _packet.Sequence = inPacket.GetInt();
            _packet.hardpoint = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.PutStringPacked(hardpoint);
        }
    }

    public class ServerPacket_Mount : IPacket
    {
        public int Sequence;
        public int id;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_Mount();
            _packet.Sequence = inPacket.GetInt();
            _packet.id = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(id);
        }
    }

    public class ServerPacket_ClosedPopup : IPacket
    {
        public string id;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_ClosedPopup();
            _packet.id = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(id);
        }
    }

    public class ServerPacket_StoryNPCSelect : IPacket
    {
        public string name;
        public string room;
        public string _base;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_StoryNPCSelect();
            _packet.name = inPacket.GetStringPacked();
            _packet.room = inPacket.GetStringPacked();
            _packet._base = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(name);
            outPacket.PutStringPacked(room);
            outPacket.PutStringPacked(_base);
        }
    }

    public class ServerPacket_RTCMissionAccepted : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_RTCMissionAccepted();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ServerPacket_Respawn : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_Respawn();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ServerPacket_ChatMessage : IPacket
    {
        public ChatCategory category;
        public string message;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ServerPacket_ChatMessage();
            _packet.category = (ChatCategory)inPacket.GetInt();
            _packet.message = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put((int)category);
            outPacket.PutStringPacked(message);
        }
    }

    public class ClientPacket_UpdateBaselinePrices : IPacket
    {
        public BaselinePrice[] prices;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateBaselinePrices();
            uint __len_prices = inPacket.GetVariableUInt32();
            if (__len_prices > 0) {
                _packet.prices = new BaselinePrice[(int)(__len_prices - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.prices.Length; _ARRIDX++)
                    _packet.prices[_ARRIDX] = BaselinePrice.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            if (prices != null) {
                outPacket.PutVariableUInt32((uint)(prices.Length + 1));
                foreach(var _element in prices)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_CallThorn : IPacket
    {
        public string script;
        public int mainObject;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_CallThorn();
            _packet.script = inPacket.GetStringPacked();
            _packet.mainObject = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(script);
            outPacket.Put(mainObject);
        }
    }

    public class ClientPacket_SpawnObject : IPacket
    {
        public int id;
        public string name;
        public Vector3 position;
        public Quaternion orientation;
        public NetShipLoadout loadout;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnObject();
            _packet.id = inPacket.GetInt();
            _packet.name = inPacket.GetStringPacked();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            _packet.loadout = NetShipLoadout.Read(inPacket);
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(id);
            outPacket.PutStringPacked(name);
            outPacket.Put(position);
            outPacket.Put(orientation);
            loadout.Put(outPacket);
        }
    }

    public class ClientPacket_SpawnPlayer : IPacket
    {
        public string system;
        public double systime;
        public Vector3 position;
        public Quaternion orientation;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnPlayer();
            _packet.system = inPacket.GetStringPacked();
            _packet.systime = inPacket.GetDouble();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(system);
            outPacket.Put(systime);
            outPacket.Put(position);
            outPacket.Put(orientation);
        }
    }

    public class ClientPacket_UpdateEffects : IPacket
    {
        public int id;
        public SpawnedEffect[] effects;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateEffects();
            _packet.id = inPacket.GetInt();
            uint __len_effects = inPacket.GetVariableUInt32();
            if (__len_effects > 0) {
                _packet.effects = new SpawnedEffect[(int)(__len_effects - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.effects.Length; _ARRIDX++)
                    _packet.effects[_ARRIDX] = SpawnedEffect.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(id);
            if (effects != null) {
                outPacket.PutVariableUInt32((uint)(effects.Length + 1));
                foreach(var _element in effects)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_SpawnProjectiles : IPacket
    {
        public ProjectileSpawn[] projectiles;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnProjectiles();
            uint __len_projectiles = inPacket.GetVariableUInt32();
            if (__len_projectiles > 0) {
                _packet.projectiles = new ProjectileSpawn[(int)(__len_projectiles - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.projectiles.Length; _ARRIDX++)
                    _packet.projectiles[_ARRIDX] = ProjectileSpawn.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            if (projectiles != null) {
                outPacket.PutVariableUInt32((uint)(projectiles.Length + 1));
                foreach(var _element in projectiles)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_StartAnimation : IPacket
    {
        public bool systemObject;
        public int id;
        public string anim;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_StartAnimation();
            _packet.systemObject = inPacket.GetBool();
            _packet.id = inPacket.GetInt();
            _packet.anim = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(systemObject);
            outPacket.Put(id);
            outPacket.PutStringPacked(anim);
        }
    }

    public class ClientPacket_UpdateInventory : IPacket
    {
        public long credits;
        public ulong shipworth;
        public NetShipLoadout ship;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateInventory();
            _packet.credits = inPacket.GetLong();
            _packet.shipworth = inPacket.GetULong();
            _packet.ship = NetShipLoadout.Read(inPacket);
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(credits);
            outPacket.Put(shipworth);
            ship.Put(outPacket);
        }
    }

    public class ClientPacket_SpawnSolar : IPacket
    {
        public SolarInfo[] solars;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnSolar();
            uint __len_solars = inPacket.GetVariableUInt32();
            if (__len_solars > 0) {
                _packet.solars = new SolarInfo[(int)(__len_solars - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.solars.Length; _ARRIDX++)
                    _packet.solars[_ARRIDX] = SolarInfo.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            if (solars != null) {
                outPacket.PutVariableUInt32((uint)(solars.Length + 1));
                foreach(var _element in solars)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_OnConsoleMessage : IPacket
    {
        public string text;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_OnConsoleMessage();
            _packet.text = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(text);
        }
    }

    public class ClientPacket_SpawnDebris : IPacket
    {
        public int id;
        public GameObjectKind kind;
        public string archetype;
        public string part;
        public Vector3 position;
        public Quaternion orientation;
        public float mass;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnDebris();
            _packet.id = inPacket.GetInt();
            _packet.kind = (GameObjectKind)inPacket.GetInt();
            _packet.archetype = inPacket.GetStringPacked();
            _packet.part = inPacket.GetStringPacked();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            _packet.mass = inPacket.GetFloat();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(id);
            outPacket.Put((int)kind);
            outPacket.PutStringPacked(archetype);
            outPacket.PutStringPacked(part);
            outPacket.Put(position);
            outPacket.Put(orientation);
            outPacket.Put(mass);
        }
    }

    public class ClientPacket_BaseEnter : IPacket
    {
        public string _base;
        public string[] rtcs;
        public NewsArticle[] news;
        public SoldGood[] goods;
        public NetSoldShip[] ships;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_BaseEnter();
            _packet._base = inPacket.GetStringPacked();
            uint __len_rtcs = inPacket.GetVariableUInt32();
            if (__len_rtcs > 0) {
                _packet.rtcs = new string[(int)(__len_rtcs - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.rtcs.Length; _ARRIDX++)
                    _packet.rtcs[_ARRIDX] = inPacket.GetStringPacked();
            }
            uint __len_news = inPacket.GetVariableUInt32();
            if (__len_news > 0) {
                _packet.news = new NewsArticle[(int)(__len_news - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.news.Length; _ARRIDX++)
                    _packet.news[_ARRIDX] = NewsArticle.Read(inPacket);
            }
            uint __len_goods = inPacket.GetVariableUInt32();
            if (__len_goods > 0) {
                _packet.goods = new SoldGood[(int)(__len_goods - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.goods.Length; _ARRIDX++)
                    _packet.goods[_ARRIDX] = SoldGood.Read(inPacket);
            }
            uint __len_ships = inPacket.GetVariableUInt32();
            if (__len_ships > 0) {
                _packet.ships = new NetSoldShip[(int)(__len_ships - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.ships.Length; _ARRIDX++)
                    _packet.ships[_ARRIDX] = NetSoldShip.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(_base);
            if (rtcs != null) {
                outPacket.PutVariableUInt32((uint)(rtcs.Length + 1));
                foreach(var _element in rtcs)
                    outPacket.PutStringPacked(_element);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (news != null) {
                outPacket.PutVariableUInt32((uint)(news.Length + 1));
                foreach(var _element in news)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (goods != null) {
                outPacket.PutVariableUInt32((uint)(goods.Length + 1));
                foreach(var _element in goods)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (ships != null) {
                outPacket.PutVariableUInt32((uint)(ships.Length + 1));
                foreach(var _element in ships)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_UpdateRTCs : IPacket
    {
        public string[] rtcs;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateRTCs();
            uint __len_rtcs = inPacket.GetVariableUInt32();
            if (__len_rtcs > 0) {
                _packet.rtcs = new string[(int)(__len_rtcs - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.rtcs.Length; _ARRIDX++)
                    _packet.rtcs[_ARRIDX] = inPacket.GetStringPacked();
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            if (rtcs != null) {
                outPacket.PutVariableUInt32((uint)(rtcs.Length + 1));
                foreach(var _element in rtcs)
                    outPacket.PutStringPacked(_element);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_Killed : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_Killed();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ClientPacket_DespawnObject : IPacket
    {
        public int id;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_DespawnObject();
            _packet.id = inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(id);
        }
    }

    public class ClientPacket_PlaySound : IPacket
    {
        public string sound;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_PlaySound();
            _packet.sound = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(sound);
        }
    }

    public class ClientPacket_PlayMusic : IPacket
    {
        public string music;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_PlayMusic();
            _packet.music = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.PutStringPacked(music);
        }
    }

    public class ClientPacket_DestroyPart : IPacket
    {
        public byte idtype;
        public int id;
        public string part;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_DestroyPart();
            _packet.idtype = inPacket.GetByte();
            _packet.id = inPacket.GetInt();
            _packet.part = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(idtype);
            outPacket.Put(id);
            outPacket.PutStringPacked(part);
        }
    }

    public class ClientPacket_RunMissionDialog : IPacket
    {
        public NetDlgLine[] lines;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_RunMissionDialog();
            uint __len_lines = inPacket.GetVariableUInt32();
            if (__len_lines > 0) {
                _packet.lines = new NetDlgLine[(int)(__len_lines - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.lines.Length; _ARRIDX++)
                    _packet.lines[_ARRIDX] = NetDlgLine.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            if (lines != null) {
                outPacket.PutVariableUInt32((uint)(lines.Length + 1));
                foreach(var _element in lines)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    public class ClientPacket_StartJumpTunnel : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_StartJumpTunnel();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ClientPacket_StartTradelane : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_StartTradelane();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ClientPacket_EndTradelane : IPacket
    {
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_EndTradelane();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
        }
    }

    public class ClientPacket_ReceiveChatMessage : IPacket
    {
        public ChatCategory category;
        public string player;
        public string message;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_ReceiveChatMessage();
            _packet.category = (ChatCategory)inPacket.GetInt();
            _packet.player = inPacket.GetStringPacked();
            _packet.message = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put((int)category);
            outPacket.PutStringPacked(player);
            outPacket.PutStringPacked(message);
        }
    }

    public class ClientPacket_PopupOpen : IPacket
    {
        public int title;
        public int contents;
        public string id;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ClientPacket_PopupOpen();
            _packet.title = inPacket.GetInt();
            _packet.contents = inPacket.GetInt();
            _packet.id = inPacket.GetStringPacked();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(title);
            outPacket.Put(contents);
            outPacket.PutStringPacked(id);
        }
    }

    public class ResponsePacket_bool : IPacket
    {
        public int Sequence;
        public bool Value;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ResponsePacket_bool();
            _packet.Sequence = inPacket.GetInt();
            _packet.Value = inPacket.GetBool();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put(Value);
        }
    }

    public class ResponsePacket_ShipPackageInfo : IPacket
    {
        public int Sequence;
        public ShipPackageInfo Value;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ResponsePacket_ShipPackageInfo();
            _packet.Sequence = inPacket.GetInt();
            if(inPacket.GetByte() == 1) _packet.Value = ShipPackageInfo.Read(inPacket);
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            if (Value == null) outPacket.Put((byte)0);
            else {
                outPacket.Put((byte)1);
                Value.Put(outPacket);
            }
        }
    }

    public class ResponsePacket_ShipPurchaseStatus : IPacket
    {
        public int Sequence;
        public ShipPurchaseStatus Value;
        public static object Read(NetPacketReader inPacket)
        {
            var _packet = new ResponsePacket_ShipPurchaseStatus();
            _packet.Sequence = inPacket.GetInt();
            _packet.Value = (ShipPurchaseStatus)inPacket.GetInt();
            return _packet;
        }
        public void WriteContents(NetDataWriter outPacket)
        {
            outPacket.Put(Sequence);
            outPacket.Put((int)Value);
        }
    }
    public partial class NetResponseHandler
    {
        public TaskCompletionSource<bool> GetCompletionSource_bool(int sequence)
        {
            var src = new TaskCompletionSource<bool>();
            completionSources.Add(sequence, src);
            return src;
        }

        public TaskCompletionSource<ShipPackageInfo> GetCompletionSource_ShipPackageInfo(int sequence)
        {
            var src = new TaskCompletionSource<ShipPackageInfo>();
            completionSources.Add(sequence, src);
            return src;
        }

        public TaskCompletionSource<ShipPurchaseStatus> GetCompletionSource_ShipPurchaseStatus(int sequence)
        {
            var src = new TaskCompletionSource<ShipPurchaseStatus>();
            completionSources.Add(sequence, src);
            return src;
        }

        public bool HandlePacket(IPacket pkt)
        {
            switch (pkt)
            {
                case ResponsePacket_bool _1: {
                    if (completionSources.TryGetValue(_1.Sequence, out object k)) {
                        completionSources.Remove(_1.Sequence);
                        if (k is TaskCompletionSource<bool> i) i.SetResult(_1.Value);
                    }
                    return true;
                }
                case ResponsePacket_ShipPackageInfo _2: {
                    if (completionSources.TryGetValue(_2.Sequence, out object k)) {
                        completionSources.Remove(_2.Sequence);
                        if (k is TaskCompletionSource<ShipPackageInfo> i) i.SetResult(_2.Value);
                    }
                    return true;
                }
                case ResponsePacket_ShipPurchaseStatus _3: {
                    if (completionSources.TryGetValue(_3.Sequence, out object k)) {
                        completionSources.Remove(_3.Sequence);
                        if (k is TaskCompletionSource<ShipPurchaseStatus> i) i.SetResult(_3.Value);
                    }
                    return true;
                }
            }
            return false;
        }
    }
    static class GeneratedProtocol
    {
        public static void RegisterPackets()
        {
            Packets.Register<ResponsePacket_bool>(ResponsePacket_bool.Read);
            Packets.Register<ResponsePacket_ShipPackageInfo>(ResponsePacket_ShipPackageInfo.Read);
            Packets.Register<ResponsePacket_ShipPurchaseStatus>(ResponsePacket_ShipPurchaseStatus.Read);
            Packets.Register<ServerPacket_Launch>(ServerPacket_Launch.Read);
            Packets.Register<ServerPacket_RTCComplete>(ServerPacket_RTCComplete.Read);
            Packets.Register<ServerPacket_LineSpoken>(ServerPacket_LineSpoken.Read);
            Packets.Register<ServerPacket_OnLocationEnter>(ServerPacket_OnLocationEnter.Read);
            Packets.Register<ServerPacket_ConsoleCommand>(ServerPacket_ConsoleCommand.Read);
            Packets.Register<ServerPacket_RequestCharacterDB>(ServerPacket_RequestCharacterDB.Read);
            Packets.Register<ServerPacket_SelectCharacter>(ServerPacket_SelectCharacter.Read);
            Packets.Register<ServerPacket_DeleteCharacter>(ServerPacket_DeleteCharacter.Read);
            Packets.Register<ServerPacket_CreateNewCharacter>(ServerPacket_CreateNewCharacter.Read);
            Packets.Register<ServerPacket_PurchaseGood>(ServerPacket_PurchaseGood.Read);
            Packets.Register<ServerPacket_SellGood>(ServerPacket_SellGood.Read);
            Packets.Register<ServerPacket_GetShipPackage>(ServerPacket_GetShipPackage.Read);
            Packets.Register<ServerPacket_PurchaseShip>(ServerPacket_PurchaseShip.Read);
            Packets.Register<ServerPacket_RequestDock>(ServerPacket_RequestDock.Read);
            Packets.Register<ServerPacket_FireProjectiles>(ServerPacket_FireProjectiles.Read);
            Packets.Register<ServerPacket_Unmount>(ServerPacket_Unmount.Read);
            Packets.Register<ServerPacket_Mount>(ServerPacket_Mount.Read);
            Packets.Register<ServerPacket_ClosedPopup>(ServerPacket_ClosedPopup.Read);
            Packets.Register<ServerPacket_StoryNPCSelect>(ServerPacket_StoryNPCSelect.Read);
            Packets.Register<ServerPacket_RTCMissionAccepted>(ServerPacket_RTCMissionAccepted.Read);
            Packets.Register<ServerPacket_Respawn>(ServerPacket_Respawn.Read);
            Packets.Register<ServerPacket_ChatMessage>(ServerPacket_ChatMessage.Read);
            Packets.Register<ClientPacket_UpdateBaselinePrices>(ClientPacket_UpdateBaselinePrices.Read);
            Packets.Register<ClientPacket_CallThorn>(ClientPacket_CallThorn.Read);
            Packets.Register<ClientPacket_SpawnObject>(ClientPacket_SpawnObject.Read);
            Packets.Register<ClientPacket_SpawnPlayer>(ClientPacket_SpawnPlayer.Read);
            Packets.Register<ClientPacket_UpdateEffects>(ClientPacket_UpdateEffects.Read);
            Packets.Register<ClientPacket_SpawnProjectiles>(ClientPacket_SpawnProjectiles.Read);
            Packets.Register<ClientPacket_StartAnimation>(ClientPacket_StartAnimation.Read);
            Packets.Register<ClientPacket_UpdateInventory>(ClientPacket_UpdateInventory.Read);
            Packets.Register<ClientPacket_SpawnSolar>(ClientPacket_SpawnSolar.Read);
            Packets.Register<ClientPacket_OnConsoleMessage>(ClientPacket_OnConsoleMessage.Read);
            Packets.Register<ClientPacket_SpawnDebris>(ClientPacket_SpawnDebris.Read);
            Packets.Register<ClientPacket_BaseEnter>(ClientPacket_BaseEnter.Read);
            Packets.Register<ClientPacket_UpdateRTCs>(ClientPacket_UpdateRTCs.Read);
            Packets.Register<ClientPacket_Killed>(ClientPacket_Killed.Read);
            Packets.Register<ClientPacket_DespawnObject>(ClientPacket_DespawnObject.Read);
            Packets.Register<ClientPacket_PlaySound>(ClientPacket_PlaySound.Read);
            Packets.Register<ClientPacket_PlayMusic>(ClientPacket_PlayMusic.Read);
            Packets.Register<ClientPacket_DestroyPart>(ClientPacket_DestroyPart.Read);
            Packets.Register<ClientPacket_RunMissionDialog>(ClientPacket_RunMissionDialog.Read);
            Packets.Register<ClientPacket_StartJumpTunnel>(ClientPacket_StartJumpTunnel.Read);
            Packets.Register<ClientPacket_StartTradelane>(ClientPacket_StartTradelane.Read);
            Packets.Register<ClientPacket_EndTradelane>(ClientPacket_EndTradelane.Read);
            Packets.Register<ClientPacket_ReceiveChatMessage>(ClientPacket_ReceiveChatMessage.Read);
            Packets.Register<ClientPacket_PopupOpen>(ClientPacket_PopupOpen.Read);
        }

        public static async Task<bool> HandleServerPacket(IPacket pkt, IServerPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ServerPacket_Launch _1: {
                    player.Launch();
                    return true;
                }
                case ServerPacket_RTCComplete _2: {
                    player.RTCComplete(_2.rtc);
                    return true;
                }
                case ServerPacket_LineSpoken _3: {
                    player.LineSpoken(_3.hash);
                    return true;
                }
                case ServerPacket_OnLocationEnter _4: {
                    player.OnLocationEnter(_4._base,_4.room);
                    return true;
                }
                case ServerPacket_ConsoleCommand _5: {
                    player.ConsoleCommand(_5.command);
                    return true;
                }
                case ServerPacket_RequestCharacterDB _6: {
                    player.RequestCharacterDB();
                    return true;
                }
                case ServerPacket_SelectCharacter _7: {
                    var retval = await player.SelectCharacter(_7.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _7.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_DeleteCharacter _8: {
                    var retval = await player.DeleteCharacter(_8.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _8.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_CreateNewCharacter _9: {
                    var retval = await player.CreateNewCharacter(_9.name,_9.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _9.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_PurchaseGood _10: {
                    var retval = await player.PurchaseGood(_10.item,_10.count);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _10.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_SellGood _11: {
                    var retval = await player.SellGood(_11.id,_11.count);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _11.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_GetShipPackage _12: {
                    var retval = await player.GetShipPackage(_12.package);
                    res.SendResponse(new ResponsePacket_ShipPackageInfo() { Sequence = _12.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_PurchaseShip _13: {
                    var retval = await player.PurchaseShip(_13.package,_13.mountedPlayer,_13.mountedPackage,_13.sellPlayer,_13.sellPackage);
                    res.SendResponse(new ResponsePacket_ShipPurchaseStatus() { Sequence = _13.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_RequestDock _14: {
                    player.RequestDock(_14.nickname);
                    return true;
                }
                case ServerPacket_FireProjectiles _15: {
                    player.FireProjectiles(_15.projectiles);
                    return true;
                }
                case ServerPacket_Unmount _16: {
                    var retval = await player.Unmount(_16.hardpoint);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _16.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_Mount _17: {
                    var retval = await player.Mount(_17.id);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _17.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_ClosedPopup _18: {
                    player.ClosedPopup(_18.id);
                    return true;
                }
                case ServerPacket_StoryNPCSelect _19: {
                    player.StoryNPCSelect(_19.name,_19.room,_19._base);
                    return true;
                }
                case ServerPacket_RTCMissionAccepted _20: {
                    player.RTCMissionAccepted();
                    return true;
                }
                case ServerPacket_Respawn _21: {
                    player.Respawn();
                    return true;
                }
                case ServerPacket_ChatMessage _22: {
                    player.ChatMessage(_22.category,_22.message);
                    return true;
                }
            }
            return false;
        }

        public static async Task<bool> HandleClientPacket(IPacket pkt, IClientPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ClientPacket_UpdateBaselinePrices _1: {
                    player.UpdateBaselinePrices(_1.prices);
                    return true;
                }
                case ClientPacket_CallThorn _2: {
                    player.CallThorn(_2.script,_2.mainObject);
                    return true;
                }
                case ClientPacket_SpawnObject _3: {
                    player.SpawnObject(_3.id,_3.name,_3.position,_3.orientation,_3.loadout);
                    return true;
                }
                case ClientPacket_SpawnPlayer _4: {
                    player.SpawnPlayer(_4.system,_4.systime,_4.position,_4.orientation);
                    return true;
                }
                case ClientPacket_UpdateEffects _5: {
                    player.UpdateEffects(_5.id,_5.effects);
                    return true;
                }
                case ClientPacket_SpawnProjectiles _6: {
                    player.SpawnProjectiles(_6.projectiles);
                    return true;
                }
                case ClientPacket_StartAnimation _7: {
                    player.StartAnimation(_7.systemObject,_7.id,_7.anim);
                    return true;
                }
                case ClientPacket_UpdateInventory _8: {
                    player.UpdateInventory(_8.credits,_8.shipworth,_8.ship);
                    return true;
                }
                case ClientPacket_SpawnSolar _9: {
                    player.SpawnSolar(_9.solars);
                    return true;
                }
                case ClientPacket_OnConsoleMessage _10: {
                    player.OnConsoleMessage(_10.text);
                    return true;
                }
                case ClientPacket_SpawnDebris _11: {
                    player.SpawnDebris(_11.id,_11.kind,_11.archetype,_11.part,_11.position,_11.orientation,_11.mass);
                    return true;
                }
                case ClientPacket_BaseEnter _12: {
                    player.BaseEnter(_12._base,_12.rtcs,_12.news,_12.goods,_12.ships);
                    return true;
                }
                case ClientPacket_UpdateRTCs _13: {
                    player.UpdateRTCs(_13.rtcs);
                    return true;
                }
                case ClientPacket_Killed _14: {
                    player.Killed();
                    return true;
                }
                case ClientPacket_DespawnObject _15: {
                    player.DespawnObject(_15.id);
                    return true;
                }
                case ClientPacket_PlaySound _16: {
                    player.PlaySound(_16.sound);
                    return true;
                }
                case ClientPacket_PlayMusic _17: {
                    player.PlayMusic(_17.music);
                    return true;
                }
                case ClientPacket_DestroyPart _18: {
                    player.DestroyPart(_18.idtype,_18.id,_18.part);
                    return true;
                }
                case ClientPacket_RunMissionDialog _19: {
                    player.RunMissionDialog(_19.lines);
                    return true;
                }
                case ClientPacket_StartJumpTunnel _20: {
                    player.StartJumpTunnel();
                    return true;
                }
                case ClientPacket_StartTradelane _21: {
                    player.StartTradelane();
                    return true;
                }
                case ClientPacket_EndTradelane _22: {
                    player.EndTradelane();
                    return true;
                }
                case ClientPacket_ReceiveChatMessage _23: {
                    player.ReceiveChatMessage(_23.category,_23.player,_23.message);
                    return true;
                }
                case ClientPacket_PopupOpen _24: {
                    player.PopupOpen(_24.title,_24.contents,_24.id);
                    return true;
                }
            }
            return false;
        }

    }
}
