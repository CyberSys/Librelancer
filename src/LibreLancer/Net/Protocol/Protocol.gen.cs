// AUTOGENERATED CODE
// Generated: 20210714 11:38:33 UTC

using System;
using System.Threading.Tasks;
using LiteNetLib;
using LiteNetLib.Utils;

namespace LibreLancer.Net
{
    public interface IClientPlayer
    {
        void CallThorn(string script);
        void DespawnObject(int id);
        void PlaySound(string sound);
        void PlayMusic(string music);
        void DestroyPart(byte idtype, int id, string part);
    }

    public interface IServerPlayer
    {
        void Launch();
        void RTCComplete(string rtc);
        void LineSpoken(uint hash);
        void OnLocationEnter(string _base, string room);
        void ConsoleCommand(string command);
    }

    public partial class RemoteServerPlayer : IServerPlayer
    {
        int retSeq;

        public void Launch()
        {
            SendPacket(new ServerPacket_Launch() {
            });
        }

        public void RTCComplete(string rtc)
        {
            SendPacket(new ServerPacket_RTCComplete() {
                rtc = rtc,
            });
        }

        public void LineSpoken(uint hash)
        {
            SendPacket(new ServerPacket_LineSpoken() {
                hash = hash,
            });
        }

        public void OnLocationEnter(string _base, string room)
        {
            SendPacket(new ServerPacket_OnLocationEnter() {
                _base = _base,
                room = room,
            });
        }

        public void ConsoleCommand(string command)
        {
            SendPacket(new ServerPacket_ConsoleCommand() {
                command = command,
            });
        }

    }
    public partial class RemoteClientPlayer : IClientPlayer
    {
        int retSeq;

        public void CallThorn(string script)
        {
            SendPacket(new ClientPacket_CallThorn() {
                script = script,
            });
        }

        public void DespawnObject(int id)
        {
            SendPacket(new ClientPacket_DespawnObject() {
                id = id,
            });
        }

        public void PlaySound(string sound)
        {
            SendPacket(new ClientPacket_PlaySound() {
                sound = sound,
            });
        }

        public void PlayMusic(string music)
        {
            SendPacket(new ClientPacket_PlayMusic() {
                music = music,
            });
        }

        public void DestroyPart(byte idtype, int id, string part)
        {
            SendPacket(new ClientPacket_DestroyPart() {
                idtype = idtype,
                id = id,
                part = part,
            });
        }

    }

    public class ServerPacket_Launch : IPacket
    {
        public static object Read(NetPacketReader message) => new ServerPacket_Launch() {
        };
        public void WriteContents(NetDataWriter message)
        {
        }
    }

    public class ServerPacket_RTCComplete : IPacket
    {
        public string rtc;
        public static object Read(NetPacketReader message) => new ServerPacket_RTCComplete() {
            rtc =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(rtc);
        }
    }

    public class ServerPacket_LineSpoken : IPacket
    {
        public uint hash;
        public static object Read(NetPacketReader message) => new ServerPacket_LineSpoken() {
            hash =  message.GetUInt(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(hash);
        }
    }

    public class ServerPacket_OnLocationEnter : IPacket
    {
        public string _base;
        public string room;
        public static object Read(NetPacketReader message) => new ServerPacket_OnLocationEnter() {
            _base =  message.GetString(),
            room =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(_base);
            message.Put(room);
        }
    }

    public class ServerPacket_ConsoleCommand : IPacket
    {
        public string command;
        public static object Read(NetPacketReader message) => new ServerPacket_ConsoleCommand() {
            command =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(command);
        }
    }

    public class ClientPacket_CallThorn : IPacket
    {
        public string script;
        public static object Read(NetPacketReader message) => new ClientPacket_CallThorn() {
            script =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(script);
        }
    }

    public class ClientPacket_DespawnObject : IPacket
    {
        public int id;
        public static object Read(NetPacketReader message) => new ClientPacket_DespawnObject() {
            id =  message.GetInt(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(id);
        }
    }

    public class ClientPacket_PlaySound : IPacket
    {
        public string sound;
        public static object Read(NetPacketReader message) => new ClientPacket_PlaySound() {
            sound =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(sound);
        }
    }

    public class ClientPacket_PlayMusic : IPacket
    {
        public string music;
        public static object Read(NetPacketReader message) => new ClientPacket_PlayMusic() {
            music =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(music);
        }
    }

    public class ClientPacket_DestroyPart : IPacket
    {
        public byte idtype;
        public int id;
        public string part;
        public static object Read(NetPacketReader message) => new ClientPacket_DestroyPart() {
            idtype =  message.GetByte(),
            id =  message.GetInt(),
            part =  message.GetString(),
        };
        public void WriteContents(NetDataWriter message)
        {
            message.Put(idtype);
            message.Put(id);
            message.Put(part);
        }
    }
    static class GeneratedProtocol
    {
        public static void RegisterPackets()
        {
            Packets.Register<ServerPacket_Launch>(ServerPacket_Launch.Read);
            Packets.Register<ServerPacket_RTCComplete>(ServerPacket_RTCComplete.Read);
            Packets.Register<ServerPacket_LineSpoken>(ServerPacket_LineSpoken.Read);
            Packets.Register<ServerPacket_OnLocationEnter>(ServerPacket_OnLocationEnter.Read);
            Packets.Register<ServerPacket_ConsoleCommand>(ServerPacket_ConsoleCommand.Read);
            Packets.Register<ClientPacket_CallThorn>(ClientPacket_CallThorn.Read);
            Packets.Register<ClientPacket_DespawnObject>(ClientPacket_DespawnObject.Read);
            Packets.Register<ClientPacket_PlaySound>(ClientPacket_PlaySound.Read);
            Packets.Register<ClientPacket_PlayMusic>(ClientPacket_PlayMusic.Read);
            Packets.Register<ClientPacket_DestroyPart>(ClientPacket_DestroyPart.Read);
        }

        public static async Task<bool> HandleServerPacket(IPacket pkt, IServerPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ServerPacket_Launch _1: {
                    player.Launch();
                    return true;
                }
                case ServerPacket_RTCComplete _2: {
                    player.RTCComplete(_2.rtc);
                    return true;
                }
                case ServerPacket_LineSpoken _3: {
                    player.LineSpoken(_3.hash);
                    return true;
                }
                case ServerPacket_OnLocationEnter _4: {
                    player.OnLocationEnter(_4._base,_4.room);
                    return true;
                }
                case ServerPacket_ConsoleCommand _5: {
                    player.ConsoleCommand(_5.command);
                    return true;
                }
            }
            return false;
        }

        public static async Task<bool> HandleClientPacket(IPacket pkt, IClientPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ClientPacket_CallThorn _1: {
                    player.CallThorn(_1.script);
                    return true;
                }
                case ClientPacket_DespawnObject _2: {
                    player.DespawnObject(_2.id);
                    return true;
                }
                case ClientPacket_PlaySound _3: {
                    player.PlaySound(_3.sound);
                    return true;
                }
                case ClientPacket_PlayMusic _4: {
                    player.PlayMusic(_4.music);
                    return true;
                }
                case ClientPacket_DestroyPart _5: {
                    player.DestroyPart(_5.idtype,_5.id,_5.part);
                    return true;
                }
            }
            return false;
        }

    }
}
