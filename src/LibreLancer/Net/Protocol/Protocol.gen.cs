// AUTOGENERATED CODE
// Generated: 20210715 13:44:18 UTC
// Method count: 21

using System;
using System.Numerics;
using System.Threading.Tasks;
using LiteNetLib;
using LiteNetLib.Utils;

namespace LibreLancer.Net
{
    public interface IClientPlayer
    {
        void CallThorn(string script);
        void SpawnObject(int id, string name, Vector3 position, Quaternion orientation, NetShipLoadout loadout);
        void SpawnPlayer(string system, Vector3 position, Quaternion orientation, NetShipLoadout ship);
        void SpawnSolar(SolarInfo[] solars);
        void SpawnDebris(int id, string archetype, string part, Vector3 position, Quaternion orientation, float mass);
        void BaseEnter(string _base, NetShipLoadout ship, string[] rtcs);
        void UpdateRTCs(string[] rtcs);
        void DespawnObject(int id);
        void PlaySound(string sound);
        void PlayMusic(string music);
        void DestroyPart(byte idtype, int id, string part);
        void RunMissionDialog(NetDlgLine[] lines);
    }

    public interface IServerPlayer
    {
        void Launch();
        void RTCComplete(string rtc);
        void LineSpoken(uint hash);
        void OnLocationEnter(string _base, string room);
        void ConsoleCommand(string command);
        void RequestCharacterDB();
        Task<bool> SelectCharacter(int index);
        Task<bool> DeleteCharacter(int index);
        Task<bool> CreateNewCharacter(string name, int index);
    }

    public partial class RemoteServerPlayer : IServerPlayer
    {
        int retSeq;

        public void Launch()
        {
            SendPacket(new ServerPacket_Launch() {
            });
        }

        public void RTCComplete(string rtc)
        {
            SendPacket(new ServerPacket_RTCComplete() {
                rtc = rtc,
            });
        }

        public void LineSpoken(uint hash)
        {
            SendPacket(new ServerPacket_LineSpoken() {
                hash = hash,
            });
        }

        public void OnLocationEnter(string _base, string room)
        {
            SendPacket(new ServerPacket_OnLocationEnter() {
                _base = _base,
                room = room,
            });
        }

        public void ConsoleCommand(string command)
        {
            SendPacket(new ServerPacket_ConsoleCommand() {
                command = command,
            });
        }

        public void RequestCharacterDB()
        {
            SendPacket(new ServerPacket_RequestCharacterDB() {
            });
        }

        public Task<bool> SelectCharacter(int index)
        {
            var complete = ResponseHandler.GetCompletionSource_bool(retSeq);
            SendPacket(new ServerPacket_SelectCharacter() {
                Sequence = retSeq++,
                index = index,
            });
            return complete.Task;
        }

        public Task<bool> DeleteCharacter(int index)
        {
            var complete = ResponseHandler.GetCompletionSource_bool(retSeq);
            SendPacket(new ServerPacket_DeleteCharacter() {
                Sequence = retSeq++,
                index = index,
            });
            return complete.Task;
        }

        public Task<bool> CreateNewCharacter(string name, int index)
        {
            var complete = ResponseHandler.GetCompletionSource_bool(retSeq);
            SendPacket(new ServerPacket_CreateNewCharacter() {
                Sequence = retSeq++,
                name = name,
                index = index,
            });
            return complete.Task;
        }

    }
    public partial class RemoteClientPlayer : IClientPlayer
    {
        int retSeq;

        public void CallThorn(string script)
        {
            SendPacket(new ClientPacket_CallThorn() {
                script = script,
            });
        }

        public void SpawnObject(int id, string name, Vector3 position, Quaternion orientation, NetShipLoadout loadout)
        {
            SendPacket(new ClientPacket_SpawnObject() {
                id = id,
                name = name,
                position = position,
                orientation = orientation,
                loadout = loadout,
            });
        }

        public void SpawnPlayer(string system, Vector3 position, Quaternion orientation, NetShipLoadout ship)
        {
            SendPacket(new ClientPacket_SpawnPlayer() {
                system = system,
                position = position,
                orientation = orientation,
                ship = ship,
            });
        }

        public void SpawnSolar(SolarInfo[] solars)
        {
            SendPacket(new ClientPacket_SpawnSolar() {
                solars = solars,
            });
        }

        public void SpawnDebris(int id, string archetype, string part, Vector3 position, Quaternion orientation, float mass)
        {
            SendPacket(new ClientPacket_SpawnDebris() {
                id = id,
                archetype = archetype,
                part = part,
                position = position,
                orientation = orientation,
                mass = mass,
            });
        }

        public void BaseEnter(string _base, NetShipLoadout ship, string[] rtcs)
        {
            SendPacket(new ClientPacket_BaseEnter() {
                _base = _base,
                ship = ship,
                rtcs = rtcs,
            });
        }

        public void UpdateRTCs(string[] rtcs)
        {
            SendPacket(new ClientPacket_UpdateRTCs() {
                rtcs = rtcs,
            });
        }

        public void DespawnObject(int id)
        {
            SendPacket(new ClientPacket_DespawnObject() {
                id = id,
            });
        }

        public void PlaySound(string sound)
        {
            SendPacket(new ClientPacket_PlaySound() {
                sound = sound,
            });
        }

        public void PlayMusic(string music)
        {
            SendPacket(new ClientPacket_PlayMusic() {
                music = music,
            });
        }

        public void DestroyPart(byte idtype, int id, string part)
        {
            SendPacket(new ClientPacket_DestroyPart() {
                idtype = idtype,
                id = id,
                part = part,
            });
        }

        public void RunMissionDialog(NetDlgLine[] lines)
        {
            SendPacket(new ClientPacket_RunMissionDialog() {
                lines = lines,
            });
        }

    }

    public class ServerPacket_Launch : IPacket
    {
        public static object Read(NetPacketReader message)
        {
            return new ServerPacket_Launch() {
            };
        }
        public void WriteContents(NetDataWriter message)
        {
        }
    }

    public class ServerPacket_RTCComplete : IPacket
    {
        public string rtc;
        public static object Read(NetPacketReader message)
        {
            var rtc = message.GetString();
            return new ServerPacket_RTCComplete() {
                rtc = rtc,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(rtc);
        }
    }

    public class ServerPacket_LineSpoken : IPacket
    {
        public uint hash;
        public static object Read(NetPacketReader message)
        {
            var hash = message.GetUInt();
            return new ServerPacket_LineSpoken() {
                hash = hash,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(hash);
        }
    }

    public class ServerPacket_OnLocationEnter : IPacket
    {
        public string _base;
        public string room;
        public static object Read(NetPacketReader message)
        {
            var _base = message.GetString();
            var room = message.GetString();
            return new ServerPacket_OnLocationEnter() {
                _base = _base,
                room = room,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(_base);
            message.Put(room);
        }
    }

    public class ServerPacket_ConsoleCommand : IPacket
    {
        public string command;
        public static object Read(NetPacketReader message)
        {
            var command = message.GetString();
            return new ServerPacket_ConsoleCommand() {
                command = command,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(command);
        }
    }

    public class ServerPacket_RequestCharacterDB : IPacket
    {
        public static object Read(NetPacketReader message)
        {
            return new ServerPacket_RequestCharacterDB() {
            };
        }
        public void WriteContents(NetDataWriter message)
        {
        }
    }

    public class ServerPacket_SelectCharacter : IPacket
    {
        public int Sequence;
        public int index;
        public static object Read(NetPacketReader message)
        {
            var index = message.GetInt();
            return new ServerPacket_SelectCharacter() {
                Sequence = message.GetInt(),
                index = index,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(Sequence);
            message.Put(index);
        }
    }

    public class ServerPacket_DeleteCharacter : IPacket
    {
        public int Sequence;
        public int index;
        public static object Read(NetPacketReader message)
        {
            var index = message.GetInt();
            return new ServerPacket_DeleteCharacter() {
                Sequence = message.GetInt(),
                index = index,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(Sequence);
            message.Put(index);
        }
    }

    public class ServerPacket_CreateNewCharacter : IPacket
    {
        public int Sequence;
        public string name;
        public int index;
        public static object Read(NetPacketReader message)
        {
            var name = message.GetString();
            var index = message.GetInt();
            return new ServerPacket_CreateNewCharacter() {
                Sequence = message.GetInt(),
                name = name,
                index = index,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(Sequence);
            message.Put(name);
            message.Put(index);
        }
    }

    public class ClientPacket_CallThorn : IPacket
    {
        public string script;
        public static object Read(NetPacketReader message)
        {
            var script = message.GetString();
            return new ClientPacket_CallThorn() {
                script = script,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(script);
        }
    }

    public class ClientPacket_SpawnObject : IPacket
    {
        public int id;
        public string name;
        public Vector3 position;
        public Quaternion orientation;
        public NetShipLoadout loadout;
        public static object Read(NetPacketReader message)
        {
            var id = message.GetInt();
            var name = message.GetString();
            var position = message.GetVector3();
            var orientation = message.GetQuaternion();
            var loadout = NetShipLoadout.Read(message);
            return new ClientPacket_SpawnObject() {
                id = id,
                name = name,
                position = position,
                orientation = orientation,
                loadout = loadout,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(id);
            message.Put(name);
            message.Put(position);
            message.Put(orientation);
            loadout.Put(message);
        }
    }

    public class ClientPacket_SpawnPlayer : IPacket
    {
        public string system;
        public Vector3 position;
        public Quaternion orientation;
        public NetShipLoadout ship;
        public static object Read(NetPacketReader message)
        {
            var system = message.GetString();
            var position = message.GetVector3();
            var orientation = message.GetQuaternion();
            var ship = NetShipLoadout.Read(message);
            return new ClientPacket_SpawnPlayer() {
                system = system,
                position = position,
                orientation = orientation,
                ship = ship,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(system);
            message.Put(position);
            message.Put(orientation);
            ship.Put(message);
        }
    }

    public class ClientPacket_SpawnSolar : IPacket
    {
        public SolarInfo[] solars;
        public static object Read(NetPacketReader message)
        {
            var solars = new SolarInfo[(int)message.GetVariableUInt32()];
            for(int _ARRIDX = 0; _ARRIDX < solars.Length; _ARRIDX++)
                solars[_ARRIDX] = SolarInfo.Read(message);
            return new ClientPacket_SpawnSolar() {
                solars = solars,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.PutVariableUInt32((uint)solars.Length);
            foreach(var _element in solars)
                _element.Put(message);
        }
    }

    public class ClientPacket_SpawnDebris : IPacket
    {
        public int id;
        public string archetype;
        public string part;
        public Vector3 position;
        public Quaternion orientation;
        public float mass;
        public static object Read(NetPacketReader message)
        {
            var id = message.GetInt();
            var archetype = message.GetString();
            var part = message.GetString();
            var position = message.GetVector3();
            var orientation = message.GetQuaternion();
            var mass = message.GetFloat();
            return new ClientPacket_SpawnDebris() {
                id = id,
                archetype = archetype,
                part = part,
                position = position,
                orientation = orientation,
                mass = mass,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(id);
            message.Put(archetype);
            message.Put(part);
            message.Put(position);
            message.Put(orientation);
            message.Put(mass);
        }
    }

    public class ClientPacket_BaseEnter : IPacket
    {
        public string _base;
        public NetShipLoadout ship;
        public string[] rtcs;
        public static object Read(NetPacketReader message)
        {
            var _base = message.GetString();
            var ship = NetShipLoadout.Read(message);
            var rtcs = new string[(int)message.GetVariableUInt32()];
            for(int _ARRIDX = 0; _ARRIDX < rtcs.Length; _ARRIDX++)
                rtcs[_ARRIDX] = message.GetString();
            return new ClientPacket_BaseEnter() {
                _base = _base,
                ship = ship,
                rtcs = rtcs,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(_base);
            ship.Put(message);
            message.PutVariableUInt32((uint)rtcs.Length);
            foreach(var _element in rtcs)
                message.Put(_element);
        }
    }

    public class ClientPacket_UpdateRTCs : IPacket
    {
        public string[] rtcs;
        public static object Read(NetPacketReader message)
        {
            var rtcs = new string[(int)message.GetVariableUInt32()];
            for(int _ARRIDX = 0; _ARRIDX < rtcs.Length; _ARRIDX++)
                rtcs[_ARRIDX] = message.GetString();
            return new ClientPacket_UpdateRTCs() {
                rtcs = rtcs,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.PutVariableUInt32((uint)rtcs.Length);
            foreach(var _element in rtcs)
                message.Put(_element);
        }
    }

    public class ClientPacket_DespawnObject : IPacket
    {
        public int id;
        public static object Read(NetPacketReader message)
        {
            var id = message.GetInt();
            return new ClientPacket_DespawnObject() {
                id = id,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(id);
        }
    }

    public class ClientPacket_PlaySound : IPacket
    {
        public string sound;
        public static object Read(NetPacketReader message)
        {
            var sound = message.GetString();
            return new ClientPacket_PlaySound() {
                sound = sound,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(sound);
        }
    }

    public class ClientPacket_PlayMusic : IPacket
    {
        public string music;
        public static object Read(NetPacketReader message)
        {
            var music = message.GetString();
            return new ClientPacket_PlayMusic() {
                music = music,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(music);
        }
    }

    public class ClientPacket_DestroyPart : IPacket
    {
        public byte idtype;
        public int id;
        public string part;
        public static object Read(NetPacketReader message)
        {
            var idtype = message.GetByte();
            var id = message.GetInt();
            var part = message.GetString();
            return new ClientPacket_DestroyPart() {
                idtype = idtype,
                id = id,
                part = part,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(idtype);
            message.Put(id);
            message.Put(part);
        }
    }

    public class ClientPacket_RunMissionDialog : IPacket
    {
        public NetDlgLine[] lines;
        public static object Read(NetPacketReader message)
        {
            var lines = new NetDlgLine[(int)message.GetVariableUInt32()];
            for(int _ARRIDX = 0; _ARRIDX < lines.Length; _ARRIDX++)
                lines[_ARRIDX] = NetDlgLine.Read(message);
            return new ClientPacket_RunMissionDialog() {
                lines = lines,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.PutVariableUInt32((uint)lines.Length);
            foreach(var _element in lines)
                _element.Put(message);
        }
    }

    public class ResponsePacket_bool : IPacket
    {
        public int Sequence;
        public bool Value;
        public static object Read(NetPacketReader message)
        {
            var Value = message.GetBool();
            return new ResponsePacket_bool() {
                Sequence = message.GetInt(),
                Value = Value,
            };
        }
        public void WriteContents(NetDataWriter message)
        {
            message.Put(Sequence);
            message.Put(Value);
        }
    }
    public partial class NetResponseHandler
    {
        public TaskCompletionSource<bool> GetCompletionSource_bool(int sequence)
        {
            var src = new TaskCompletionSource<bool>();
            completionSources.Add(sequence, src);
            return src;
        }

        public bool HandlePacket(IPacket pkt)
        {
            switch (pkt)
            {
                case ResponsePacket_bool _1: {
                    if (completionSources.TryGetValue(_1.Sequence, out object k)) {
                        completionSources.Remove(_1.Sequence);
                        if (k is TaskCompletionSource<bool> i) i.SetResult(_1.Value);
                    }
                    return true;
                }
            }
            return false;
        }
    }
    static class GeneratedProtocol
    {
        public static void RegisterPackets()
        {
            Packets.Register<ResponsePacket_bool>(ResponsePacket_bool.Read);
            Packets.Register<ServerPacket_Launch>(ServerPacket_Launch.Read);
            Packets.Register<ServerPacket_RTCComplete>(ServerPacket_RTCComplete.Read);
            Packets.Register<ServerPacket_LineSpoken>(ServerPacket_LineSpoken.Read);
            Packets.Register<ServerPacket_OnLocationEnter>(ServerPacket_OnLocationEnter.Read);
            Packets.Register<ServerPacket_ConsoleCommand>(ServerPacket_ConsoleCommand.Read);
            Packets.Register<ServerPacket_RequestCharacterDB>(ServerPacket_RequestCharacterDB.Read);
            Packets.Register<ServerPacket_SelectCharacter>(ServerPacket_SelectCharacter.Read);
            Packets.Register<ServerPacket_DeleteCharacter>(ServerPacket_DeleteCharacter.Read);
            Packets.Register<ServerPacket_CreateNewCharacter>(ServerPacket_CreateNewCharacter.Read);
            Packets.Register<ClientPacket_CallThorn>(ClientPacket_CallThorn.Read);
            Packets.Register<ClientPacket_SpawnObject>(ClientPacket_SpawnObject.Read);
            Packets.Register<ClientPacket_SpawnPlayer>(ClientPacket_SpawnPlayer.Read);
            Packets.Register<ClientPacket_SpawnSolar>(ClientPacket_SpawnSolar.Read);
            Packets.Register<ClientPacket_SpawnDebris>(ClientPacket_SpawnDebris.Read);
            Packets.Register<ClientPacket_BaseEnter>(ClientPacket_BaseEnter.Read);
            Packets.Register<ClientPacket_UpdateRTCs>(ClientPacket_UpdateRTCs.Read);
            Packets.Register<ClientPacket_DespawnObject>(ClientPacket_DespawnObject.Read);
            Packets.Register<ClientPacket_PlaySound>(ClientPacket_PlaySound.Read);
            Packets.Register<ClientPacket_PlayMusic>(ClientPacket_PlayMusic.Read);
            Packets.Register<ClientPacket_DestroyPart>(ClientPacket_DestroyPart.Read);
            Packets.Register<ClientPacket_RunMissionDialog>(ClientPacket_RunMissionDialog.Read);
        }

        public static async Task<bool> HandleServerPacket(IPacket pkt, IServerPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ServerPacket_Launch _1: {
                    player.Launch();
                    return true;
                }
                case ServerPacket_RTCComplete _2: {
                    player.RTCComplete(_2.rtc);
                    return true;
                }
                case ServerPacket_LineSpoken _3: {
                    player.LineSpoken(_3.hash);
                    return true;
                }
                case ServerPacket_OnLocationEnter _4: {
                    player.OnLocationEnter(_4._base,_4.room);
                    return true;
                }
                case ServerPacket_ConsoleCommand _5: {
                    player.ConsoleCommand(_5.command);
                    return true;
                }
                case ServerPacket_RequestCharacterDB _6: {
                    player.RequestCharacterDB();
                    return true;
                }
                case ServerPacket_SelectCharacter _7: {
                    var retval = await player.SelectCharacter(_7.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _7.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_DeleteCharacter _8: {
                    var retval = await player.DeleteCharacter(_8.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _8.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_CreateNewCharacter _9: {
                    var retval = await player.CreateNewCharacter(_9.name,_9.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _9.Sequence, Value = retval });
                    return true;
                }
            }
            return false;
        }

        public static async Task<bool> HandleClientPacket(IPacket pkt, IClientPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ClientPacket_CallThorn _1: {
                    player.CallThorn(_1.script);
                    return true;
                }
                case ClientPacket_SpawnObject _2: {
                    player.SpawnObject(_2.id,_2.name,_2.position,_2.orientation,_2.loadout);
                    return true;
                }
                case ClientPacket_SpawnPlayer _3: {
                    player.SpawnPlayer(_3.system,_3.position,_3.orientation,_3.ship);
                    return true;
                }
                case ClientPacket_SpawnSolar _4: {
                    player.SpawnSolar(_4.solars);
                    return true;
                }
                case ClientPacket_SpawnDebris _5: {
                    player.SpawnDebris(_5.id,_5.archetype,_5.part,_5.position,_5.orientation,_5.mass);
                    return true;
                }
                case ClientPacket_BaseEnter _6: {
                    player.BaseEnter(_6._base,_6.ship,_6.rtcs);
                    return true;
                }
                case ClientPacket_UpdateRTCs _7: {
                    player.UpdateRTCs(_7.rtcs);
                    return true;
                }
                case ClientPacket_DespawnObject _8: {
                    player.DespawnObject(_8.id);
                    return true;
                }
                case ClientPacket_PlaySound _9: {
                    player.PlaySound(_9.sound);
                    return true;
                }
                case ClientPacket_PlayMusic _10: {
                    player.PlayMusic(_10.music);
                    return true;
                }
                case ClientPacket_DestroyPart _11: {
                    player.DestroyPart(_11.idtype,_11.id,_11.part);
                    return true;
                }
                case ClientPacket_RunMissionDialog _12: {
                    player.RunMissionDialog(_12.lines);
                    return true;
                }
            }
            return false;
        }

    }
}
